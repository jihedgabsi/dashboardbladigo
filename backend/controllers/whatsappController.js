const qrcode = require('qrcode');
const { Client, LocalAuth } = require('whatsapp-web.js');

let whatsappScanQR = null;
let isWhatsAppConnected = false;
let isClientInitialized = false;

// Cr√©ation du client WhatsApp
const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox', 
            '--disable-setuid-sandbox', 
            '--disable-dev-shm-usage',
            '--single-process', // Pour am√©liorer la stabilit√©
            '--disable-gpu', // Peut aider √† r√©duire les erreurs sur certains syst√®mes
        ],
    },
});

// --- EVENTS ---

// QR re√ßu
client.on('qr', async (qr) => {
    console.log('üì≤ QR Code re√ßu');
    whatsappScanQR = await qrcode.toDataURL(qr);
    console.log('üîó QR Code g√©n√©r√© en DataURL pour affichage.');
});

// Client pr√™t
client.on('ready', () => {
    console.log('‚úÖ WhatsApp Web connect√© !');
    isWhatsAppConnected = true;
    isClientInitialized = false;
    console.log(`‚ÑπÔ∏è Statut : isWhatsAppConnected=${isWhatsAppConnected}, isClientInitialized=${isClientInitialized}`);
});

// D√©connect√©
client.on('disconnected', (reason) => {
    console.log('‚ùå D√©connect√© de WhatsApp:', reason);
    isWhatsAppConnected = false;
    isClientInitialized = false;
    whatsappScanQR = null;
    console.log('üîÑ Tentative de reconnexion automatique...');
    // Ajout d'un petit d√©lai avant de tenter la reconnexion pour √©viter une boucle rapide
    setTimeout(() => startWhatsApp(), 5000); 
});

// --- FUNCTIONS ---

const startWhatsApp = async () => {
    if (isWhatsAppConnected || isClientInitialized) {
        console.log('‚ö†Ô∏è WhatsApp d√©j√† connect√© ou en cours d\'initialisation.');
        return;
    }
    try {
        isClientInitialized = true;
        console.log('üöÄ Initialisation du client WhatsApp...');
        await client.initialize();
        console.log('‚úÖ Client WhatsApp initialis√©.');
    } catch (err) {
        console.error('‚ùå Erreur lors de l\'initialisation de WhatsApp:', err);
        isClientInitialized = false;
    }
};

// --- API ENDPOINTS ---

// D√©marrer WhatsApp
exports.startWhatsApp = async (req, res) => {
    console.log('üì• Requ√™te re√ßue : /whatsapp/start');
    if (isWhatsAppConnected) {
        console.log('‚ÑπÔ∏è WhatsApp d√©j√† connect√©.');
        return res.json({ success: true, message: "‚úÖ WhatsApp est d√©j√† connect√©." });
    }
    if (isClientInitialized) {
        console.log('‚ÑπÔ∏è Connexion WhatsApp en cours...');
        return res.json({ success: true, message: "üïí WhatsApp est en cours de connexion..." });
    }
    startWhatsApp();
    res.json({ success: true, message: "üöÄ WhatsApp en cours de d√©marrage..." });
};

// Obtenir le QR Code
exports.getQRCode = (req, res) => {
    console.log('üì• Requ√™te re√ßue : /whatsapp/qrcode');
    if (!whatsappScanQR) {
        console.log('‚ö†Ô∏è QR Code non disponible.');
        return res.status(404).json({ error: "QR Code non disponible. D√©marrez WhatsApp avec /whatsapp/start" });
    }
    res.json({ qrCode: whatsappScanQR });
    console.log('‚úÖ QR Code renvoy√© au client.');
};

// Envoyer un message
exports.sendMessage = async (req, res) => {
    console.log('üì• Requ√™te re√ßue : /whatsapp/send');
    const { phone, message } = req.body;

    if (!phone || !message) {
        console.log('‚ö†Ô∏è Num√©ro ou message manquant.');
        return res.status(400).json({ error: "Num√©ro et message requis." });
    }
    if (!isWhatsAppConnected) {
        console.log('‚ö†Ô∏è WhatsApp non connect√©.');
        return res.status(403).json({ error: "WhatsApp n'est pas connect√©. Veuillez scanner le QR Code." });
    }

    try {
        // Validation et nettoyage du num√©ro de t√©l√©phone
        const cleanPhone = phone.replace(/\D/g, "");
        if (cleanPhone.length < 8) { // V√©rification de la longueur minimale d'un num√©ro de t√©l√©phone
            return res.status(400).json({ error: "Num√©ro de t√©l√©phone invalide." });
        }
        
        const chatId = `${cleanPhone}@c.us`;

        console.log(`‚ÑπÔ∏è Tentative d'envoi du message √† ${chatId}...`);
        
        // Nouvelle m√©thode : v√©rification si le num√©ro est enregistr√© sur WhatsApp
        const isRegistered = await client.isRegisteredUser(chatId);
        if (!isRegistered) {
            console.log(`‚ùå Le num√©ro ${phone} n'est pas un utilisateur WhatsApp valide.`);
            return res.status(404).json({ error: "Ce num√©ro n'est pas un utilisateur WhatsApp." });
        }
        
        await client.sendMessage(chatId, message);
        console.log(`‚úÖ Message envoy√© √† ${phone}: "${message}"`);
        res.json({ success: true, message: `Message envoy√© √† ${phone}` });
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'envoi du message:', error);
        res.status(500).json({ error: "Erreur lors de l'envoi du message. V√©rifiez le num√©ro et la connexion." });
    }
};

// V√©rifier le statut
exports.getStatus = (req, res) => {
    console.log('üì• Requ√™te re√ßue : /whatsapp/status');
    res.json({ isConnected: isWhatsAppConnected });
};

// D√©connexion
exports.logoutWhatsApp = async (req, res) => {
    console.log('üì• Requ√™te re√ßue : /whatsapp/logout');
    if (!isWhatsAppConnected) {
        console.log('‚ö†Ô∏è WhatsApp non connect√©.');
        return res.json({ success: false, message: "WhatsApp n'est pas connect√©." });
    }
    try {
        await client.logout();
        console.log('‚úÖ WhatsApp d√©connect√© avec succ√®s.');
        isWhatsAppConnected = false;
        isClientInitialized = false;
        whatsappScanQR = null;
        res.json({ success: true, message: "WhatsApp d√©connect√© avec succ√®s." });
    } catch (error) {
        console.error('‚ùå Erreur lors de la d√©connexion:', error);
        res.status(500).json({ error: "Erreur lors de la d√©connexion de WhatsApp." });
    }
};
